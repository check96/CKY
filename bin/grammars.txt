% start S
############################
# Grammar Rules
############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det] N[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,SEM=<\P.P(angus)>] -> Angus
PropN[-LOC,NUM=sg,SEM=<\P.P(cyril)>] -> Cyril
PropN[-LOC,NUM=sg,SEM=<\P.P(irene)>] -> Irene

Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> ogni
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> tutti
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> qualche
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> un
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> una

N[NUM=sg,SEM=<\x.uomo(x)>] -> uomo
N[NUM=sg,SEM=<\x.donna(x)>] -> donna
N[NUM=sg,SEM=<\x.ragazza(x)>] -> ragazza
N[NUM=sg,SEM=<\x.ragazzo(x)>] -> ragazzo
N[NUM=sg,SEM=<\x.ossa(x)>] -> ossa
N[NUM=sg,SEM=<\x.cane(x)>] -> cane
N[NUM=pl,SEM=<\x.cane(x)>] -> cani

IV[NUM=sg,SEM=<\x.abbaia(x)>,TNS=pres] -> abbaia
IV[NUM=sg,SEM=<\x.cammina(x)>,TNS=pres] -> cammina
TV[NUM=sg,SEM=<\X x.X(\y.vede(x,y))>,TNS=pres] -> vede
DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.da(x,y,z)))>,TNS=pres] -> da

P[+a] -> a
end.